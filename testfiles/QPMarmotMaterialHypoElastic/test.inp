*material, name=LinearElastic, id=myMaterial
**Isotropic
**E   | nu |
1.8e4, 0.22

*section, name=section1, material=myMaterial, type=solid
all

*node
** this is our single dummy node, which carries the strain 'field'
1, 0, 0, 0

*element, provider=MarmotSingleQpElement, type=MarmotMaterialHypoElastic
** This is our mateiral wrapping element. It needs a dummy node to be attached 
** to a spatial position.
** The type of the element actually specifies the type of requested MarmotMaterial
1, 1

*job, name=mySingleElementJob, domain=3d, solver=NIST

*step, maxInc=1e0, minInc=1e0, maxNumInc=100, maxIter=25, stepLength=1
setinitialconditions, property=characteristic element length, values='100,'
dirichlet,  name=prescribed_strain, nSet=all, field=strain symmetric, components='[ 0, x, x, 0, 0, 0 ]', 
nodeforces, name=prescribed_stress, nSet=all, field=strain symmetric, components='[ x, 0, 0, x, x, x ]' 

*step, maxInc=1e-1, minInc=1e0, maxNumInc=10, maxIter=25, stepLength=1
dirichlet, name=prescribed_strain,                                    components='[ -0.2,  x,    x, 0,   0, 0 ]' 
nodeforces, name=prescribed_stress,                                   components='[ x,    .1,   .2, x,   x, x ]' 

*fieldOutput,
name=stress, elSet=all, result=stress, quadraturePoint=0,  saveHistory=True
name=strain, elSet=all, result=strain, quadraturePoint=0,  saveHistory=True
name=dStress_dStrain, elSet=all, result=dStress_dStrain, quadraturePoint=0,  saveHistory=True, f(x)="np.reshape(x, (6,-1), order='F')"

*output, type=monitor, jobName=mySingleElementJob
fieldOutput=stress, f(x)="'\n' + np.array2string(x, formatter={'float_kind':'{:>8.2f}'.format})"
fieldOutput=strain, f(x)="'\n' + np.array2string(x, formatter={'float_kind':'{:>8.2f}'.format})"
fieldOutput=dStress_dStrain, f(x)="'\n' + np.array2string(x, formatter={'float_kind':'{:>8.2f}'.format})"

